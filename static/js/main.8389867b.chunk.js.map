{"version":3,"sources":["images sync nonrecursive //.jpg$","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ImageBlock","styled","div","props","pickList","indexOf","Image","img","List","Checkbox","Button","App","r","useState","setPickList","click","setClick","finish","setFinish","lineInit","setLineInit","pickRef","useRef","imagesList","require","map","imagesId","split","pop","shift","database","useEffect","ref","on","lists","Object","entries","get","val","x","current","liff","init","liffId","then","imageBlock","useCallback","index","key","type","htmlFor","data-src","alt","onClick","newList","splice","push","checkImagePick","className","Promise","reject","getAllPicks","flatten","getUniqPicks","uniq","counts","pick","name","count","filter","picks","length","sort","a","b","numbers","num","result","includes","picked","total","value","isInClient","sendMessages","text","t","join","closeWindow","catch","err","console","log","sendLIFFMessage","style","pointerEvents","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8389867b.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 42;","import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport firebase from \"firebase\";\nimport { get, flatten, uniq } from \"lodash\";\nimport liff from \"@line/liff\";\nimport \"lazysizes\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBu6AZ7U-mXlw9pInObwtaCuW02u01-32M\",\n  authDomain: \"unme-test-8e49b.firebaseapp.com\",\n  databaseURL: \"https://unme-test-8e49b.firebaseio.com\",\n  projectId: \"unme-test-8e49b\",\n  storageBucket: \"unme-test-8e49b.appspot.com\",\n  messagingSenderId: \"586093179471\",\n  appId: \"1:586093179471:web:e2a59d8701fa9b71fe303a\",\n  measurementId: \"G-PSHFT5M5QD\",\n});\n\nconst ImageBlock = styled.div`\n  width: 100%;\n  margin: 10px;\n  box-sizing: border-box;\n  position: relative;\n  &:before {\n    ${(props) =>\n      props.pickList.indexOf(props.id) !== -1\n        ? `content: \"已選擇\";\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 30px;\n    color: white;\n    background: rgba(18, 132, 255, 0.5);\n    width: 100%;\n    height: 100%;\n    font-family:PingFang TC, Noto Sans CJK TC, Noto Sans TC, Microsoft JhengHei;\n    font-weight: bold;\n    letter-spacing: 2px;\n    position: absolute;\n    pointer-events: none`\n        : \"\"}\n  }\n  border: $4px solid transparent;\n`;\nconst Image = styled.img`\n  width: 100%;\n`;\n\nconst List = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Checkbox = styled.div`\n  display: none;\n`;\n\nconst Button = styled.div`\n  position: fixed;\n  padding: 10px 20px;\n  border-radius: 5px;\n  font-size: 15px;\n  background: white;\n  bottom: 5vh;\n  right: 4vw;\n  cursor: pointer;\n`;\nconst App = () => {\n  const [pickList, setPickList] = useState([]);\n  const [click, setClick] = useState(true);\n  const [finish, setFinish] = useState(false);\n  const [lineInit, setLineInit] = useState(false);\n  const pickRef = useRef(\"\");\n\n  // 每次皆需做替換！！\n  // 記得確認現在的寫入規則是否超時 https://console.firebase.google.com/u/0/project/unme-test-8e49b/database/unme-test-8e49b/rules\n  const CURRENT_PROJECT = \"MAYO\";\n\n  // import all images\n  const importAll = (r) => {\n    return r.keys().map(r);\n  };\n  const imagesList = importAll(require.context(\"images\", false, /\\.jpg$/));\n  const imagesId = imagesList.map((img) => {\n    return img.split(\"/\").pop().split(\".\").shift();\n  });\n\n  // Initialize Firebase\n  const database = firebase.database();\n\n  useEffect(() => {\n    database.ref(\"/\").on(\"value\", (e) => {\n      const lists = Object.entries(get(e.val(), CURRENT_PROJECT, \"\")).map(\n        (x) => x[1]\n      );\n      pickRef.current = lists;\n    });\n  }, []);\n\n  useEffect(() => {\n    // init LIFF\n    liff.init({ liffId: \"1655422524-z7Y2doDm\" }).then(() => {\n      setLineInit(true);\n    });\n  }, []);\n\n  // pick images\n  const checkImagePick = (id) => {\n    let newList = pickList;\n    if (newList.indexOf(id) !== -1) {\n      newList.splice(newList.indexOf(id), 1);\n    } else {\n      newList.push(id);\n    }\n    setPickList(() => newList);\n    setClick(!click);\n  };\n\n  const imageBlock = useCallback(() => {\n    return imagesList.map((img, index) => {\n      return (\n        <ImageBlock pickList={pickList} id={imagesId[index]} key={index}>\n          <Checkbox type=\"checkbox\" id={imagesId[index]} />\n          <label htmlFor={imagesId[index]}>\n            <Image\n              data-src={img}\n              alt={imagesId[index]}\n              onClick={() => checkImagePick(imagesId[index])}\n              className=\"lazyload\"\n            />\n          </label>\n        </ImageBlock>\n      );\n    });\n  }, [click]);\n\n  // send liff message after click button\n  const sendLIFFMessage = (value) => {\n    if (!liff.isInClient()) {\n      console.log(\"is not at mobile\");\n    } else {\n      const totalText = () => {\n        const text = value.total.map((t) => {\n          return `${t.name}： ${t.count}張\\n`;\n        });\n        return text.join(\"\");\n      };\n      liff\n        .sendMessages([\n          {\n            type: \"text\",\n            text: `我已選擇了${value.picked.pop()}`,\n          },\n          {\n            type: \"text\",\n            text: `現在的統計為 - \\n${totalText()}`,\n          },\n        ])\n        .then(() => {\n          liff.closeWindow();\n        })\n        .catch((err) => {\n          console.log(\"error\", err);\n        });\n    }\n  };\n\n  const onClick = () => {\n    return new Promise((resolve, reject) => {\n      database.ref(`/${CURRENT_PROJECT}`).push(pickList);\n      resolve();\n    })\n      .then(() => {\n        const getAllPicks = flatten(pickRef.current);\n        const getUniqPicks = uniq(getAllPicks);\n        let counts = [];\n        getUniqPicks.map((pick) => {\n          counts.push({\n            name: pick,\n            count: getAllPicks.filter((picks) => picks === pick).length,\n          });\n        });\n        counts.sort((a, b) => {\n          let numbers = (num) => {\n            let result = num.name.split(\"_\")[1];\n            if (result.includes(\"-\")) return result.split(\"-\")[0];\n            return result;\n          };\n          return numbers(a) - numbers(b);\n        });\n        return {\n          picked: pickRef.current,\n          total: counts,\n        };\n      })\n      .then((value) => {\n        setFinish(true);\n        sendLIFFMessage(value);\n        console.log(value);\n      });\n  };\n\n  if (!lineInit) return <>loading...</>;\n  return (\n    <List>\n      {imageBlock()}\n      <Button\n        onClick={onClick}\n        style={{ pointerEvents: finish ? \"none\" : \"inherit\" }}\n      >\n        {finish ? \"已完成\" : \"確認\"}\n      </Button>\n    </List>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}